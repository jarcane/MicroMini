#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
MicroMini:
\begin_inset Newline newline
\end_inset

A Racket-powered 8-bit stack machine
\end_layout

\begin_layout Author
John S.
 Berry III
\end_layout

\begin_layout Date
Last updated 11.08.2014
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The MicroMini is a virtual stack machine inspired by classic minicomputers.
 It is written in Racket, an excellent Scheme-derived Lisp with a specialty
 in teaching and new language development.
 MicroMini is purely stack based: other than memory calls, almost all operations
 take no arguments, collecting their required operands from the top of the
 stack.
 
\end_layout

\begin_layout Subsection
Specifications
\end_layout

\begin_layout Standard
The MicroMini is patterned after an imaginary vintage minicomputer, scaled
 down to home-size.
 As such, it's basic specifications are thus kept within those limits, save
 that at present, the device runs at the full speed of the user's computer
 rather than an artificially limited operation speed.
\end_layout

\begin_layout Itemize
8-bit data bus
\end_layout

\begin_layout Itemize
16-bit address bus
\end_layout

\begin_layout Itemize
64Kib of RAM
\end_layout

\begin_layout Itemize
16-bit pointer-based stack
\end_layout

\begin_layout Itemize
16-bit program and return pointers
\end_layout

\begin_layout Itemize
1-bit halt flag
\end_layout

\begin_layout Itemize
1-bit carry flag 
\end_layout

\begin_layout Itemize
8-bit cycle counter
\end_layout

\begin_layout Subsection
Usage and Requirements
\end_layout

\begin_layout Standard
At this time, MicroMini only runs on Unix-derived operating systems which
 provide 
\emph on
stty.
 
\emph default
Future implementations may correct this, however as it stands, there are
 no Racket libs for Windows platforms which can correctly handle the TRMI
 and TRMO instructions.
\end_layout

\begin_layout Standard
If running the binary, you need only invoke it from the command line, like
 so:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mmini <mm-binary-file>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Where 
\emph on
mm-binary-file 
\emph default
is the filename of a previously created binary file composed of 8-bit bytes
 of MicroMini machine code.
 Currently there is no compiler or assembler available for MicroMini, but
 the author intends to create one soon.
\end_layout

\begin_layout Standard
If you wish to run MicroMini from the source, you will need to install Racket.
 The program was created with Racket 6.1, and the author can make no guarantees
 about backwards compatibility.
 To install and invoke it, you can do:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> git clone https://github.com/jarcane/MicroMini.git
\end_layout

\begin_layout Plain Layout

> cd ./MicroMini
\end_layout

\begin_layout Plain Layout

> racket main.rkt <mm-binary-file>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Where, as before, 
\emph on
mm-binary-file 
\emph default
is a previously created MM binary.
\end_layout

\begin_layout Section
MicroMini Operation
\end_layout

\begin_layout Standard
On invocation, MicroMini will take the target file, read it byte by byte
 into memory, and begin executing from address #x0000.
 It will continue to run through valid instructions until it reaches the
 end of the RAM bank, it is given a HLT instruction, or there is an error.
 I/O at this point comes purely via terminal, handled via the TRMI and TRMO
 instructions.
\end_layout

\begin_layout Standard
Each cycle, the MicroMini:
\end_layout

\begin_layout Enumerate
Executes the instruction found at the address designated by the program
 counter
\end_layout

\begin_layout Enumerate
Increments the program pointer by 1
\end_layout

\begin_layout Enumerate
Checks if the program pointer has reached the end of ram space and, if so,
 sets the halt-bit
\end_layout

\begin_layout Enumerate
Checks the cycle counter:
\end_layout

\begin_deeper
\begin_layout Enumerate
If full, resets to 0
\end_layout

\begin_layout Enumerate
If not, increments by 1
\end_layout

\end_deeper
\begin_layout Enumerate
Checks the halt-bit, and stops execution if set
\end_layout

\begin_layout Section
MicroMini Instructions
\end_layout

\begin_layout Standard
The following are the standard instructions currently implemented in MicroMini,
 with descriptions of their operation.
 
\end_layout

\begin_layout Subsection
#x00 NOP - No OPeration
\end_layout

\begin_layout Standard
Does nothing, and will be skipped by the processor.
\end_layout

\begin_layout Subsection
#x01 HLT - HaLT
\end_layout

\begin_layout Standard
Sets the halt-bit on the processor, which will cause it to end operation
 at the end of the cycle.
\end_layout

\begin_layout Subsection
#x02 DATA 
\emph on
num
\end_layout

\begin_layout Standard
Consumes the next byte, and increments the program pointer by 
\emph on
num 
\emph default
spaces, essentially skipping over that many bytes in RAM.
\end_layout

\begin_layout Subsection
#x10 ADD
\end_layout

\begin_layout Standard
Pops the top two values in the stack, adds them, and pushes the result to
 the stack.
 If there has been an overflow, the carry-bit is set.
 
\end_layout

\begin_layout Subsection
#x20 SUB
\end_layout

\begin_layout Standard
Pops the top two values in the stack, subtracts the top value from the one
 below it, and pushes the result to the stack.
 If there is an underflow, the carry-bit is set.
\end_layout

\begin_layout Subsection
#x30 AND
\end_layout

\begin_layout Standard
Pops the top two values in the stack, ANDs their bits, and pushes the result
 to the stack.
\end_layout

\begin_layout Subsection
#x31 OR
\end_layout

\begin_layout Standard
Pops the top two values in the stack, ORs their bits, and pushes the result
 to the stack.
\end_layout

\begin_layout Subsection
#x32 XOR
\end_layout

\begin_layout Standard
Pops the top two values in the stack, XORs their bits, and pushes the result
 to the stack.
\end_layout

\begin_layout Subsection
#x33 NOT
\end_layout

\begin_layout Standard
Pops the top value from the stack, applies NOT, and pushes the result to
 the stack.
\end_layout

\begin_layout Subsection
#x40 EQ? - EQual?
\end_layout

\begin_layout Standard
Pops the top two values from the stack, and compares them.
 If they are equal, pushes 0x01 to the stack.
 If not equal, pushes 0x00.
\end_layout

\begin_layout Subsection
#x41 LES? - LESser?
\end_layout

\begin_layout Standard
Pops the top two values from the stack, and compares the top value to the
 one below it.
 If the top value is lesser, pushes 0x01 to the stack.
 If the top value is greater, pushes 0x00 to the stack.
\end_layout

\begin_layout Subsection
#x42 GRT? - GReaTer?
\end_layout

\begin_layout Standard
Pops the top two values from the stack, and compares the top value to the
 one below it.
 If the top value is greater, pushes 0x01 to the stack.
 If the top value is lesser, pushes 0x00 to the stack.
\end_layout

\begin_layout Subsection
#x50 PUSH 
\emph on
num
\end_layout

\begin_layout Standard
Consumes the next byte of ram, and pushes the value to the stack.
\end_layout

\begin_layout Subsection
#x51 PUFA 
\emph on
address - 
\emph default
PUsh From Address
\end_layout

\begin_layout Standard
Consumes the next two bytes as an address location, and pushes the value
 at that address to the stack.
\end_layout

\begin_layout Subsection
#x52 PUCA - PUsh CArry
\end_layout

\begin_layout Standard
Pushes the current carry flag to the stack.
\end_layout

\begin_layout Subsection
#x53 PUTI - PUsh TImer
\end_layout

\begin_layout Standard
Pushes the current value of the cycle counter to the stack.
\end_layout

\begin_layout Subsection
#x60 POP
\end_layout

\begin_layout Standard
Consumes the top value from the stack.
\end_layout

\begin_layout Subsection
#x61 POTA 
\emph on
address - 
\emph default
POp To Address
\end_layout

\begin_layout Standard
Consumes the next two bytes as an address location, pops the value from
 the top of the stack, and stores at at that address.
\end_layout

\begin_layout Subsection
#x70 JMP 
\emph on
address - 
\emph default
JuMP
\end_layout

\begin_layout Standard
Consumes the next two bytes as an address location, and sets the program
 pointer to continue execution from that address on the next cycle.
\end_layout

\begin_layout Subsection
#x71 JSR 
\emph on
address - 
\emph default
Jump to SubRoutine
\end_layout

\begin_layout Standard
Stores the current program pointer (skipping itself) to the return pointer,
 consumes the next two bytes as an address location, then sets the program
 pointer to continue execution at that address on the next cycle.
 Note that the return pointer does not actually point to the original location,
 but rather the location just past the original JSR instruction and its
 address, in order to prevent unbreakable loops.
\end_layout

\begin_layout Subsection
#x72 JIF 
\emph on
address - 
\emph default
Jump IF
\end_layout

\begin_layout Standard
Pops the top value of the stack.
 If it is 0x01, it consumes the next two bytes as an address, then sets
 the program pointer to continue execution from that address on the next
 cycle.
 Otherwise, it skips the next two bytes (to avoid attempting to execute
 the address values), but otherwise does nothing.
\end_layout

\begin_layout Subsection
#x73 RET - Return
\end_layout

\begin_layout Standard
Sets the program pointer equal to the return pointer, thus causing the CPU
 to resume execution just past the original JSR on the next cycle.
\end_layout

\begin_layout Subsection
#x80 TRMI - TeRMinal Input
\end_layout

\begin_layout Standard
Waits for the terminal to send a byte of input, then pushes that byte to
 the stack.
\end_layout

\begin_layout Subsection
#x90 TRMO
\end_layout

\begin_layout Standard
Pops the top value of the stack, and sends the byte to the terminal as output.
 
\end_layout

\end_body
\end_document
